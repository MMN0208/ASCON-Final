// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ascon128_permutation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_val,
        round,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [319:0] in_val;
input  [3:0] round;
output  [319:0] ap_return;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln8_fu_254_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] ROUND_CONSTANTS_address0;
reg    ROUND_CONSTANTS_ce0;
wire   [7:0] ROUND_CONSTANTS_q0;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln10_fu_270_p1;
wire    ap_block_pp0_stage0;
reg   [63:0] x_fu_124;
wire   [63:0] x_25_fu_725_p2;
wire   [63:0] x_9_fu_213_p1;
reg   [63:0] ap_sig_allocacmp_x_load;
wire    ap_loop_init;
reg   [63:0] x_1_fu_128;
wire   [63:0] x_24_fu_669_p2;
reg   [63:0] ap_sig_allocacmp_x_1_load;
reg   [63:0] x_2_fu_132;
wire   [63:0] x_23_fu_613_p2;
reg   [63:0] ap_sig_allocacmp_x_2_load;
reg   [63:0] x_3_fu_136;
wire   [63:0] x_21_fu_501_p2;
reg   [63:0] ap_sig_allocacmp_x_3_load;
reg   [63:0] x_4_fu_140;
wire   [63:0] x_22_fu_557_p2;
reg   [63:0] ap_sig_allocacmp_x_4_load;
reg   [4:0] indvars_iv_fu_144;
wire   [4:0] zext_ln8_fu_217_p1;
wire   [4:0] add_ln45_fu_275_p2;
reg   [4:0] ap_sig_allocacmp_indvars_iv_load;
wire   [3:0] trunc_ln10_fu_260_p1;
wire   [3:0] sub_ln10_fu_264_p2;
wire   [8:0] tmp_4_fu_301_p3;
wire   [63:0] zext_ln10_1_fu_309_p1;
wire   [63:0] x_10_fu_313_p2;
wire   [63:0] xor_ln25_fu_337_p2;
wire   [63:0] and_ln25_fu_343_p2;
wire   [63:0] x_11_fu_319_p2;
wire   [63:0] xor_ln27_fu_355_p2;
wire   [63:0] x_13_fu_331_p2;
wire   [63:0] and_ln27_fu_361_p2;
wire   [63:0] xor_ln29_fu_373_p2;
wire   [63:0] and_ln29_fu_379_p2;
wire   [63:0] x_12_fu_325_p2;
wire   [63:0] xor_ln31_fu_391_p2;
wire   [63:0] and_ln31_fu_397_p2;
wire   [63:0] xor_ln31_1_fu_403_p2;
wire   [63:0] x_14_fu_349_p2;
wire   [63:0] x_16_fu_385_p2;
wire   [63:0] xor_ln33_fu_421_p2;
wire   [63:0] x_15_fu_367_p2;
wire   [63:0] xor_ln33_1_fu_433_p2;
wire   [63:0] and_ln33_fu_427_p2;
wire   [63:0] x_18_fu_415_p2;
wire   [27:0] trunc_ln38_1_fu_475_p1;
wire   [35:0] lshr_ln38_1_fu_465_p4;
wire   [18:0] trunc_ln38_fu_461_p1;
wire   [44:0] lshr_ln_fu_451_p4;
wire   [63:0] or_ln38_1_fu_487_p3;
wire   [63:0] xor_ln38_fu_495_p2;
wire   [63:0] or_ln_fu_479_p3;
wire   [63:0] x_17_fu_409_p2;
wire   [38:0] trunc_ln39_1_fu_531_p1;
wire   [24:0] lshr_ln39_1_fu_521_p4;
wire   [60:0] trunc_ln39_fu_517_p1;
wire   [2:0] lshr_ln1_fu_507_p4;
wire   [63:0] or_ln39_1_fu_543_p3;
wire   [63:0] xor_ln39_fu_551_p2;
wire   [63:0] or_ln1_fu_535_p3;
wire   [63:0] x_20_fu_445_p2;
wire   [5:0] trunc_ln40_1_fu_587_p1;
wire   [57:0] lshr_ln40_1_fu_577_p4;
wire   [0:0] trunc_ln40_fu_573_p1;
wire   [62:0] lshr_ln2_fu_563_p4;
wire   [63:0] or_ln40_1_fu_599_p3;
wire   [63:0] xor_ln40_fu_607_p2;
wire   [63:0] or_ln2_fu_591_p3;
wire   [63:0] x_19_fu_439_p2;
wire   [16:0] trunc_ln41_1_fu_643_p1;
wire   [46:0] lshr_ln41_1_fu_633_p4;
wire   [9:0] trunc_ln41_fu_629_p1;
wire   [53:0] lshr_ln3_fu_619_p4;
wire   [63:0] or_ln41_1_fu_655_p3;
wire   [63:0] xor_ln41_fu_663_p2;
wire   [63:0] or_ln3_fu_647_p3;
wire   [40:0] trunc_ln42_1_fu_699_p1;
wire   [22:0] lshr_ln42_1_fu_689_p4;
wire   [6:0] trunc_ln42_fu_685_p1;
wire   [56:0] lshr_ln4_fu_675_p4;
wire   [63:0] or_ln42_1_fu_711_p3;
wire   [63:0] xor_ln42_fu_719_p2;
wire   [63:0] or_ln4_fu_703_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 x_fu_124 = 64'd0;
#0 x_1_fu_128 = 64'd0;
#0 x_2_fu_132 = 64'd0;
#0 x_3_fu_136 = 64'd0;
#0 x_4_fu_140 = 64'd0;
#0 indvars_iv_fu_144 = 5'd0;
#0 ap_done_reg = 1'b0;
end

ascon128_permutation_ROUND_CONSTANTS_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
ROUND_CONSTANTS_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ROUND_CONSTANTS_address0),
    .ce0(ROUND_CONSTANTS_ce0),
    .q0(ROUND_CONSTANTS_q0)
);

ascon128_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln8_fu_254_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvars_iv_fu_144 <= add_ln45_fu_275_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvars_iv_fu_144 <= zext_ln8_fu_217_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_1_fu_128 <= {{in_val[127:64]}};
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            x_1_fu_128 <= x_24_fu_669_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_2_fu_132 <= {{in_val[191:128]}};
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            x_2_fu_132 <= x_23_fu_613_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_3_fu_136 <= {{in_val[319:256]}};
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            x_3_fu_136 <= x_21_fu_501_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_4_fu_140 <= {{in_val[255:192]}};
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            x_4_fu_140 <= x_22_fu_557_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_fu_124 <= x_9_fu_213_p1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            x_fu_124 <= x_25_fu_725_p2;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ROUND_CONSTANTS_ce0 = 1'b1;
    end else begin
        ROUND_CONSTANTS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_254_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvars_iv_load = zext_ln8_fu_217_p1;
    end else begin
        ap_sig_allocacmp_indvars_iv_load = indvars_iv_fu_144;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_x_1_load = {{in_val[127:64]}};
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_x_1_load = x_24_fu_669_p2;
        end else begin
            ap_sig_allocacmp_x_1_load = x_1_fu_128;
        end
    end else begin
        ap_sig_allocacmp_x_1_load = x_1_fu_128;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_x_2_load = {{in_val[191:128]}};
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_x_2_load = x_23_fu_613_p2;
        end else begin
            ap_sig_allocacmp_x_2_load = x_2_fu_132;
        end
    end else begin
        ap_sig_allocacmp_x_2_load = x_2_fu_132;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_x_3_load = {{in_val[319:256]}};
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_x_3_load = x_21_fu_501_p2;
        end else begin
            ap_sig_allocacmp_x_3_load = x_3_fu_136;
        end
    end else begin
        ap_sig_allocacmp_x_3_load = x_3_fu_136;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_x_4_load = {{in_val[255:192]}};
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_x_4_load = x_22_fu_557_p2;
        end else begin
            ap_sig_allocacmp_x_4_load = x_4_fu_140;
        end
    end else begin
        ap_sig_allocacmp_x_4_load = x_4_fu_140;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_x_load = x_9_fu_213_p1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_x_load = x_25_fu_725_p2;
        end else begin
            ap_sig_allocacmp_x_load = x_fu_124;
        end
    end else begin
        ap_sig_allocacmp_x_load = x_fu_124;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ROUND_CONSTANTS_address0 = zext_ln10_fu_270_p1;

assign add_ln45_fu_275_p2 = ($signed(ap_sig_allocacmp_indvars_iv_load) + $signed(5'd31));

assign and_ln25_fu_343_p2 = (xor_ln25_fu_337_p2 & x_10_fu_313_p2);

assign and_ln27_fu_361_p2 = (xor_ln27_fu_355_p2 & x_fu_124);

assign and_ln29_fu_379_p2 = (xor_ln29_fu_373_p2 & x_4_fu_140);

assign and_ln31_fu_397_p2 = (xor_ln31_fu_391_p2 & x_1_fu_128);

assign and_ln33_fu_427_p2 = (xor_ln33_fu_421_p2 & x_11_fu_319_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_return = {{{{{ap_sig_allocacmp_x_3_load}, {ap_sig_allocacmp_x_4_load}}, {ap_sig_allocacmp_x_2_load}}, {ap_sig_allocacmp_x_1_load}}, {ap_sig_allocacmp_x_load}};

assign icmp_ln8_fu_254_p2 = ((ap_sig_allocacmp_indvars_iv_load == 5'd0) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_507_p4 = {{x_17_fu_409_p2[63:61]}};

assign lshr_ln2_fu_563_p4 = {{x_20_fu_445_p2[63:1]}};

assign lshr_ln38_1_fu_465_p4 = {{x_18_fu_415_p2[63:28]}};

assign lshr_ln39_1_fu_521_p4 = {{x_17_fu_409_p2[63:39]}};

assign lshr_ln3_fu_619_p4 = {{x_19_fu_439_p2[63:10]}};

assign lshr_ln40_1_fu_577_p4 = {{x_20_fu_445_p2[63:6]}};

assign lshr_ln41_1_fu_633_p4 = {{x_19_fu_439_p2[63:17]}};

assign lshr_ln42_1_fu_689_p4 = {{x_16_fu_385_p2[63:41]}};

assign lshr_ln4_fu_675_p4 = {{x_16_fu_385_p2[63:7]}};

assign lshr_ln_fu_451_p4 = {{x_18_fu_415_p2[63:19]}};

assign or_ln1_fu_535_p3 = {{trunc_ln39_1_fu_531_p1}, {lshr_ln39_1_fu_521_p4}};

assign or_ln2_fu_591_p3 = {{trunc_ln40_1_fu_587_p1}, {lshr_ln40_1_fu_577_p4}};

assign or_ln38_1_fu_487_p3 = {{trunc_ln38_fu_461_p1}, {lshr_ln_fu_451_p4}};

assign or_ln39_1_fu_543_p3 = {{trunc_ln39_fu_517_p1}, {lshr_ln1_fu_507_p4}};

assign or_ln3_fu_647_p3 = {{trunc_ln41_1_fu_643_p1}, {lshr_ln41_1_fu_633_p4}};

assign or_ln40_1_fu_599_p3 = {{trunc_ln40_fu_573_p1}, {lshr_ln2_fu_563_p4}};

assign or_ln41_1_fu_655_p3 = {{trunc_ln41_fu_629_p1}, {lshr_ln3_fu_619_p4}};

assign or_ln42_1_fu_711_p3 = {{trunc_ln42_fu_685_p1}, {lshr_ln4_fu_675_p4}};

assign or_ln4_fu_703_p3 = {{trunc_ln42_1_fu_699_p1}, {lshr_ln42_1_fu_689_p4}};

assign or_ln_fu_479_p3 = {{trunc_ln38_1_fu_475_p1}, {lshr_ln38_1_fu_465_p4}};

assign sub_ln10_fu_264_p2 = ($signed(4'd12) - $signed(trunc_ln10_fu_260_p1));

assign tmp_4_fu_301_p3 = {{1'd0}, {ROUND_CONSTANTS_q0}};

assign trunc_ln10_fu_260_p1 = ap_sig_allocacmp_indvars_iv_load[3:0];

assign trunc_ln38_1_fu_475_p1 = x_18_fu_415_p2[27:0];

assign trunc_ln38_fu_461_p1 = x_18_fu_415_p2[18:0];

assign trunc_ln39_1_fu_531_p1 = x_17_fu_409_p2[38:0];

assign trunc_ln39_fu_517_p1 = x_17_fu_409_p2[60:0];

assign trunc_ln40_1_fu_587_p1 = x_20_fu_445_p2[5:0];

assign trunc_ln40_fu_573_p1 = x_20_fu_445_p2[0:0];

assign trunc_ln41_1_fu_643_p1 = x_19_fu_439_p2[16:0];

assign trunc_ln41_fu_629_p1 = x_19_fu_439_p2[9:0];

assign trunc_ln42_1_fu_699_p1 = x_16_fu_385_p2[40:0];

assign trunc_ln42_fu_685_p1 = x_16_fu_385_p2[6:0];

assign x_10_fu_313_p2 = (zext_ln10_1_fu_309_p1 ^ x_2_fu_132);

assign x_11_fu_319_p2 = (x_fu_124 ^ x_3_fu_136);

assign x_12_fu_325_p2 = (x_fu_124 ^ x_1_fu_128);

assign x_13_fu_331_p2 = (x_4_fu_140 ^ x_10_fu_313_p2);

assign x_14_fu_349_p2 = (x_11_fu_319_p2 ^ and_ln25_fu_343_p2);

assign x_15_fu_367_p2 = (x_13_fu_331_p2 ^ and_ln27_fu_361_p2);

assign x_16_fu_385_p2 = (x_12_fu_325_p2 ^ and_ln29_fu_379_p2);

assign x_17_fu_409_p2 = (xor_ln31_1_fu_403_p2 ^ x_14_fu_349_p2);

assign x_18_fu_415_p2 = (x_16_fu_385_p2 ^ x_14_fu_349_p2);

assign x_19_fu_439_p2 = (xor_ln33_1_fu_433_p2 ^ and_ln33_fu_427_p2);

assign x_20_fu_445_p2 = (x_15_fu_367_p2 ^ 64'd18446744073709551615);

assign x_21_fu_501_p2 = (xor_ln38_fu_495_p2 ^ or_ln_fu_479_p3);

assign x_22_fu_557_p2 = (xor_ln39_fu_551_p2 ^ or_ln1_fu_535_p3);

assign x_23_fu_613_p2 = (xor_ln40_fu_607_p2 ^ or_ln2_fu_591_p3);

assign x_24_fu_669_p2 = (xor_ln41_fu_663_p2 ^ or_ln3_fu_647_p3);

assign x_25_fu_725_p2 = (xor_ln42_fu_719_p2 ^ or_ln4_fu_703_p3);

assign x_9_fu_213_p1 = in_val[63:0];

assign xor_ln25_fu_337_p2 = (x_4_fu_140 ^ 64'd18446744073709551615);

assign xor_ln27_fu_355_p2 = (x_1_fu_128 ^ 64'd18446744073709551615);

assign xor_ln29_fu_373_p2 = (x_11_fu_319_p2 ^ 64'd18446744073709551615);

assign xor_ln31_1_fu_403_p2 = (x_4_fu_140 ^ and_ln31_fu_397_p2);

assign xor_ln31_fu_391_p2 = (x_13_fu_331_p2 ^ 64'd18446744073709551615);

assign xor_ln33_1_fu_433_p2 = (x_1_fu_128 ^ x_15_fu_367_p2);

assign xor_ln33_fu_421_p2 = (x_12_fu_325_p2 ^ 64'd18446744073709551615);

assign xor_ln38_fu_495_p2 = (x_18_fu_415_p2 ^ or_ln38_1_fu_487_p3);

assign xor_ln39_fu_551_p2 = (x_17_fu_409_p2 ^ or_ln39_1_fu_543_p3);

assign xor_ln40_fu_607_p2 = (x_20_fu_445_p2 ^ or_ln40_1_fu_599_p3);

assign xor_ln41_fu_663_p2 = (x_19_fu_439_p2 ^ or_ln41_1_fu_655_p3);

assign xor_ln42_fu_719_p2 = (x_16_fu_385_p2 ^ or_ln42_1_fu_711_p3);

assign zext_ln10_1_fu_309_p1 = tmp_4_fu_301_p3;

assign zext_ln10_fu_270_p1 = sub_ln10_fu_264_p2;

assign zext_ln8_fu_217_p1 = round;

endmodule //ascon128_permutation
