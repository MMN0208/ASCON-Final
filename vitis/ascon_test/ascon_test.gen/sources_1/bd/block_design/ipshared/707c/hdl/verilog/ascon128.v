// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ascon128_ascon128,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.588000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3953,HLS_SYN_LUT=4570,HLS_VERSION=2023_2}" *)

module ascon128 (
        ap_clk,
        ap_rst_n,
        in_stream_TDATA,
        in_stream_TVALID,
        in_stream_TREADY,
        in_stream_TKEEP,
        in_stream_TSTRB,
        in_stream_TLAST,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        out_stream_TKEEP,
        out_stream_TSTRB,
        out_stream_TLAST,
        s_axi_ASCON128_AWVALID,
        s_axi_ASCON128_AWREADY,
        s_axi_ASCON128_AWADDR,
        s_axi_ASCON128_WVALID,
        s_axi_ASCON128_WREADY,
        s_axi_ASCON128_WDATA,
        s_axi_ASCON128_WSTRB,
        s_axi_ASCON128_ARVALID,
        s_axi_ASCON128_ARREADY,
        s_axi_ASCON128_ARADDR,
        s_axi_ASCON128_RVALID,
        s_axi_ASCON128_RREADY,
        s_axi_ASCON128_RDATA,
        s_axi_ASCON128_RRESP,
        s_axi_ASCON128_BVALID,
        s_axi_ASCON128_BREADY,
        s_axi_ASCON128_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;
parameter    C_S_AXI_ASCON128_DATA_WIDTH = 32;
parameter    C_S_AXI_ASCON128_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_ASCON128_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] in_stream_TDATA;
input   in_stream_TVALID;
output   in_stream_TREADY;
input  [7:0] in_stream_TKEEP;
input  [7:0] in_stream_TSTRB;
input  [0:0] in_stream_TLAST;
output  [63:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
output  [7:0] out_stream_TKEEP;
output  [7:0] out_stream_TSTRB;
output  [0:0] out_stream_TLAST;
input   s_axi_ASCON128_AWVALID;
output   s_axi_ASCON128_AWREADY;
input  [C_S_AXI_ASCON128_ADDR_WIDTH - 1:0] s_axi_ASCON128_AWADDR;
input   s_axi_ASCON128_WVALID;
output   s_axi_ASCON128_WREADY;
input  [C_S_AXI_ASCON128_DATA_WIDTH - 1:0] s_axi_ASCON128_WDATA;
input  [C_S_AXI_ASCON128_WSTRB_WIDTH - 1:0] s_axi_ASCON128_WSTRB;
input   s_axi_ASCON128_ARVALID;
output   s_axi_ASCON128_ARREADY;
input  [C_S_AXI_ASCON128_ADDR_WIDTH - 1:0] s_axi_ASCON128_ARADDR;
output   s_axi_ASCON128_RVALID;
input   s_axi_ASCON128_RREADY;
output  [C_S_AXI_ASCON128_DATA_WIDTH - 1:0] s_axi_ASCON128_RDATA;
output  [1:0] s_axi_ASCON128_RRESP;
output   s_axi_ASCON128_BVALID;
input   s_axi_ASCON128_BREADY;
output  [1:0] s_axi_ASCON128_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [127:0] key;
wire   [127:0] nonce;
wire   [0:0] mode;
wire   [0:0] skip_asso;
wire   [127:0] in_tag;
reg    out_tag_ap_vld;
reg    success_ap_vld;
reg    in_stream_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
reg    out_stream_TDATA_blk_n;
wire    ap_CS_fsm_state6;
reg   [127:0] in_tag_read_reg_463;
reg   [0:0] skip_asso_read_reg_468;
reg   [0:0] mode_read_reg_472;
reg   [127:0] key_read_reg_478;
wire   [319:0] state_fu_238_p4;
reg   [319:0] state_reg_485;
wire   [319:0] state_2_fu_258_p5;
wire    ap_CS_fsm_state2;
reg   [0:0] tmp_last_reg_502;
wire   [319:0] state_3_fu_298_p5;
reg   [319:0] state_3_reg_506;
reg   [319:0] state_213_load_reg_520;
reg   [63:0] tmp_data_reg_527;
reg   [0:0] tmp_last_1_reg_543;
wire   [63:0] tmp_data_32_fu_351_p2;
reg   [63:0] tmp_data_32_reg_548;
wire   [319:0] state_6_fu_363_p5;
reg   [319:0] state_6_reg_555;
wire   [319:0] state_10_fu_425_p5;
reg   [319:0] state_10_reg_560;
wire    ap_CS_fsm_state8;
wire   [127:0] xor_ln66_fu_442_p2;
reg   [127:0] xor_ln66_reg_565;
wire    ap_CS_fsm_state9;
wire   [0:0] or_ln67_fu_457_p2;
reg   [0:0] or_ln67_reg_570;
wire    grp_permutation_fu_219_ap_start;
wire    grp_permutation_fu_219_ap_done;
wire    grp_permutation_fu_219_ap_idle;
wire    grp_permutation_fu_219_ap_ready;
reg   [319:0] grp_permutation_fu_219_in_val;
reg   [3:0] grp_permutation_fu_219_round;
wire   [319:0] grp_permutation_fu_219_ap_return;
reg   [319:0] ap_phi_mux_state_112_phi_fu_213_p4;
reg   [319:0] state_112_reg_210;
wire    ap_CS_fsm_state4;
reg    ap_block_state4_on_subcall_done;
reg    grp_permutation_fu_219_ap_start_reg;
wire    ap_CS_fsm_state7;
reg   [319:0] state_0_fu_130;
reg   [319:0] state_213_fu_134;
wire   [319:0] state_9_fu_375_p5;
wire   [319:0] state_8_fu_390_p5;
wire   [319:0] state_5_fu_316_p2;
reg    ap_block_state7_on_subcall_done;
reg    ap_block_state5;
wire    ap_CS_fsm_state10;
wire    regslice_both_out_stream_V_data_V_U_apdone_blk;
wire   [127:0] trunc_ln33_fu_249_p1;
wire   [127:0] xor_ln33_fu_253_p2;
wire   [63:0] tmp_s_fu_282_p4;
wire   [63:0] xor_ln39_fu_292_p2;
wire   [63:0] tmp_4_fu_341_p4;
wire   [63:0] select_ln53_fu_358_p3;
wire   [127:0] tmp_1_fu_410_p4;
wire   [127:0] xor_ln63_fu_420_p2;
wire   [127:0] trunc_ln66_fu_438_p1;
wire   [0:0] icmp_ln67_fu_447_p2;
wire   [0:0] xor_ln67_fu_452_p2;
reg   [9:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    regslice_both_in_stream_V_data_V_U_apdone_blk;
wire   [63:0] in_stream_TDATA_int_regslice;
wire    in_stream_TVALID_int_regslice;
reg    in_stream_TREADY_int_regslice;
wire    regslice_both_in_stream_V_data_V_U_ack_in;
wire    regslice_both_in_stream_V_keep_V_U_apdone_blk;
wire   [7:0] in_stream_TKEEP_int_regslice;
wire    regslice_both_in_stream_V_keep_V_U_vld_out;
wire    regslice_both_in_stream_V_keep_V_U_ack_in;
wire    regslice_both_in_stream_V_strb_V_U_apdone_blk;
wire   [7:0] in_stream_TSTRB_int_regslice;
wire    regslice_both_in_stream_V_strb_V_U_vld_out;
wire    regslice_both_in_stream_V_strb_V_U_ack_in;
wire    regslice_both_in_stream_V_last_V_U_apdone_blk;
wire   [0:0] in_stream_TLAST_int_regslice;
wire    regslice_both_in_stream_V_last_V_U_vld_out;
wire    regslice_both_in_stream_V_last_V_U_ack_in;
wire   [63:0] out_stream_TDATA_int_regslice;
reg    out_stream_TVALID_int_regslice;
wire    out_stream_TREADY_int_regslice;
wire    regslice_both_out_stream_V_data_V_U_vld_out;
wire    regslice_both_out_stream_V_keep_V_U_apdone_blk;
wire    regslice_both_out_stream_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_stream_V_keep_V_U_vld_out;
wire    regslice_both_out_stream_V_strb_V_U_apdone_blk;
wire    regslice_both_out_stream_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_stream_V_strb_V_U_vld_out;
wire    regslice_both_out_stream_V_last_V_U_apdone_blk;
wire    regslice_both_out_stream_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_stream_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 grp_permutation_fu_219_ap_start_reg = 1'b0;
#0 state_0_fu_130 = 320'd0;
#0 state_213_fu_134 = 320'd0;
end

ascon128_permutation grp_permutation_fu_219(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_permutation_fu_219_ap_start),
    .ap_done(grp_permutation_fu_219_ap_done),
    .ap_idle(grp_permutation_fu_219_ap_idle),
    .ap_ready(grp_permutation_fu_219_ap_ready),
    .in_val(grp_permutation_fu_219_in_val),
    .round(grp_permutation_fu_219_round),
    .ap_return(grp_permutation_fu_219_ap_return)
);

ascon128_ASCON128_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_ASCON128_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_ASCON128_DATA_WIDTH ))
ASCON128_s_axi_U(
    .AWVALID(s_axi_ASCON128_AWVALID),
    .AWREADY(s_axi_ASCON128_AWREADY),
    .AWADDR(s_axi_ASCON128_AWADDR),
    .WVALID(s_axi_ASCON128_WVALID),
    .WREADY(s_axi_ASCON128_WREADY),
    .WDATA(s_axi_ASCON128_WDATA),
    .WSTRB(s_axi_ASCON128_WSTRB),
    .ARVALID(s_axi_ASCON128_ARVALID),
    .ARREADY(s_axi_ASCON128_ARREADY),
    .ARADDR(s_axi_ASCON128_ARADDR),
    .RVALID(s_axi_ASCON128_RVALID),
    .RREADY(s_axi_ASCON128_RREADY),
    .RDATA(s_axi_ASCON128_RDATA),
    .RRESP(s_axi_ASCON128_RRESP),
    .BVALID(s_axi_ASCON128_BVALID),
    .BREADY(s_axi_ASCON128_BREADY),
    .BRESP(s_axi_ASCON128_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .key(key),
    .nonce(nonce),
    .mode(mode),
    .skip_asso(skip_asso),
    .in_tag(in_tag),
    .out_tag(xor_ln66_reg_565),
    .out_tag_ap_vld(out_tag_ap_vld),
    .success(or_ln67_reg_570),
    .success_ap_vld(success_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

ascon128_regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_stream_TDATA),
    .vld_in(in_stream_TVALID),
    .ack_in(regslice_both_in_stream_V_data_V_U_ack_in),
    .data_out(in_stream_TDATA_int_regslice),
    .vld_out(in_stream_TVALID_int_regslice),
    .ack_out(in_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_stream_V_data_V_U_apdone_blk)
);

ascon128_regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_stream_TKEEP),
    .vld_in(in_stream_TVALID),
    .ack_in(regslice_both_in_stream_V_keep_V_U_ack_in),
    .data_out(in_stream_TKEEP_int_regslice),
    .vld_out(regslice_both_in_stream_V_keep_V_U_vld_out),
    .ack_out(in_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_stream_V_keep_V_U_apdone_blk)
);

ascon128_regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_stream_TSTRB),
    .vld_in(in_stream_TVALID),
    .ack_in(regslice_both_in_stream_V_strb_V_U_ack_in),
    .data_out(in_stream_TSTRB_int_regslice),
    .vld_out(regslice_both_in_stream_V_strb_V_U_vld_out),
    .ack_out(in_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_stream_V_strb_V_U_apdone_blk)
);

ascon128_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_stream_TLAST),
    .vld_in(in_stream_TVALID),
    .ack_in(regslice_both_in_stream_V_last_V_U_ack_in),
    .data_out(in_stream_TLAST_int_regslice),
    .vld_out(regslice_both_in_stream_V_last_V_U_vld_out),
    .ack_out(in_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_stream_V_last_V_U_apdone_blk)
);

ascon128_regslice_both #(
    .DataWidth( 64 ))
regslice_both_out_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_stream_TDATA_int_regslice),
    .vld_in(out_stream_TVALID_int_regslice),
    .ack_in(out_stream_TREADY_int_regslice),
    .data_out(out_stream_TDATA),
    .vld_out(regslice_both_out_stream_V_data_V_U_vld_out),
    .ack_out(out_stream_TREADY),
    .apdone_blk(regslice_both_out_stream_V_data_V_U_apdone_blk)
);

ascon128_regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_stream_TKEEP_int_regslice),
    .vld_in(out_stream_TVALID_int_regslice),
    .ack_in(regslice_both_out_stream_V_keep_V_U_ack_in_dummy),
    .data_out(out_stream_TKEEP),
    .vld_out(regslice_both_out_stream_V_keep_V_U_vld_out),
    .ack_out(out_stream_TREADY),
    .apdone_blk(regslice_both_out_stream_V_keep_V_U_apdone_blk)
);

ascon128_regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_stream_TSTRB_int_regslice),
    .vld_in(out_stream_TVALID_int_regslice),
    .ack_in(regslice_both_out_stream_V_strb_V_U_ack_in_dummy),
    .data_out(out_stream_TSTRB),
    .vld_out(regslice_both_out_stream_V_strb_V_U_vld_out),
    .ack_out(out_stream_TREADY),
    .apdone_blk(regslice_both_out_stream_V_strb_V_U_apdone_blk)
);

ascon128_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_stream_TLAST_int_regslice),
    .vld_in(out_stream_TVALID_int_regslice),
    .ack_in(regslice_both_out_stream_V_last_V_U_ack_in_dummy),
    .data_out(out_stream_TLAST),
    .vld_out(regslice_both_out_stream_V_last_V_U_vld_out),
    .ack_out(out_stream_TREADY),
    .apdone_blk(regslice_both_out_stream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_permutation_fu_219_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) | ((out_stream_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (tmp_last_1_reg_543 == 1'd0)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
            grp_permutation_fu_219_ap_start_reg <= 1'b1;
        end else if ((grp_permutation_fu_219_ap_ready == 1'b1)) begin
            grp_permutation_fu_219_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((skip_asso_read_reg_468 == 1'd0)) begin
        if (((1'b1 == ap_CS_fsm_state2) & (grp_permutation_fu_219_ap_done == 1'b1))) begin
            state_0_fu_130 <= state_2_fu_258_p5;
        end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
            state_0_fu_130 <= grp_permutation_fu_219_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_last_reg_502 == 1'd1) & (skip_asso_read_reg_468 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        state_112_reg_210 <= grp_permutation_fu_219_ap_return;
    end else if (((skip_asso_read_reg_468 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (grp_permutation_fu_219_ap_done == 1'b1))) begin
        state_112_reg_210 <= state_2_fu_258_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done) & ((tmp_last_reg_502 == 1'd1) | (skip_asso_read_reg_468 == 1'd1)))) begin
        state_213_fu_134 <= state_5_fu_316_p2;
    end else if (((mode_read_reg_472 == 1'd1) & (out_stream_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (tmp_last_1_reg_543 == 1'd1))) begin
        state_213_fu_134 <= state_8_fu_390_p5;
    end else if (((mode_read_reg_472 == 1'd0) & (out_stream_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (tmp_last_1_reg_543 == 1'd1))) begin
        state_213_fu_134 <= state_9_fu_375_p5;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_on_subcall_done) & (tmp_last_1_reg_543 == 1'd0))) begin
        state_213_fu_134 <= grp_permutation_fu_219_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        in_tag_read_reg_463 <= in_tag;
        key_read_reg_478 <= key;
        mode_read_reg_472 <= mode;
        skip_asso_read_reg_468 <= skip_asso;
        state_reg_485[255 : 0] <= state_fu_238_p4[255 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        or_ln67_reg_570 <= or_ln67_fu_457_p2;
        xor_ln66_reg_565 <= xor_ln66_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_10_reg_560 <= state_10_fu_425_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_213_load_reg_520 <= state_213_fu_134;
        tmp_data_32_reg_548 <= tmp_data_32_fu_351_p2;
        tmp_data_reg_527 <= in_stream_TDATA_int_regslice;
        tmp_last_1_reg_543 <= in_stream_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_3_reg_506 <= state_3_fu_298_p5;
        tmp_last_reg_502 <= in_stream_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_6_reg_555 <= state_6_fu_363_p5;
    end
end

always @ (*) begin
    if ((regslice_both_out_stream_V_data_V_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_permutation_fu_219_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state4_on_subcall_done)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state5))) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_stream_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state7_on_subcall_done)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((grp_permutation_fu_219_ap_done == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_stream_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_reg_502 == 1'd1) & (skip_asso_read_reg_468 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_phi_mux_state_112_phi_fu_213_p4 = grp_permutation_fu_219_ap_return;
    end else begin
        ap_phi_mux_state_112_phi_fu_213_p4 = state_112_reg_210;
    end
end

always @ (*) begin
    if (((regslice_both_out_stream_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_permutation_fu_219_in_val = state_10_reg_560;
    end else if (((1'b1 == ap_CS_fsm_state7) & (tmp_last_1_reg_543 == 1'd0))) begin
        grp_permutation_fu_219_in_val = state_6_reg_555;
    end else if (((skip_asso_read_reg_468 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        grp_permutation_fu_219_in_val = state_3_reg_506;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_permutation_fu_219_in_val = state_reg_485;
    end else begin
        grp_permutation_fu_219_in_val = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (tmp_last_1_reg_543 == 1'd0)) | ((skip_asso_read_reg_468 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        grp_permutation_fu_219_round = 4'd8;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_permutation_fu_219_round = 4'd12;
    end else begin
        grp_permutation_fu_219_round = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        in_stream_TDATA_blk_n = in_stream_TVALID_int_regslice;
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state5)) & (1'b1 == ap_CS_fsm_state5)) | ((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        in_stream_TREADY_int_regslice = 1'b1;
    end else begin
        in_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        out_stream_TDATA_blk_n = out_stream_TREADY_int_regslice;
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state5)) & (1'b1 == ap_CS_fsm_state5))) begin
        out_stream_TVALID_int_regslice = 1'b1;
    end else begin
        out_stream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_stream_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        out_tag_ap_vld = 1'b1;
    end else begin
        out_tag_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_stream_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        success_ap_vld = 1'b1;
    end else begin
        success_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((skip_asso_read_reg_468 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (grp_permutation_fu_219_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((skip_asso_read_reg_468 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (grp_permutation_fu_219_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((in_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done) & ((tmp_last_reg_502 == 1'd1) | (skip_asso_read_reg_468 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((tmp_last_reg_502 == 1'd0) & (skip_asso_read_reg_468 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((out_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state5)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((out_stream_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_on_subcall_done) & (tmp_last_1_reg_543 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_on_subcall_done) & (tmp_last_1_reg_543 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (grp_permutation_fu_219_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((regslice_both_out_stream_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state4_on_subcall_done = ((skip_asso_read_reg_468 == 1'd0) & (grp_permutation_fu_219_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((out_stream_TREADY_int_regslice == 1'b0) | (in_stream_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state7_on_subcall_done = ((grp_permutation_fu_219_ap_done == 1'b0) & (tmp_last_1_reg_543 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_permutation_fu_219_ap_start = grp_permutation_fu_219_ap_start_reg;

assign icmp_ln67_fu_447_p2 = ((xor_ln66_fu_442_p2 == in_tag_read_reg_463) ? 1'b1 : 1'b0);

assign in_stream_TREADY = regslice_both_in_stream_V_data_V_U_ack_in;

assign or_ln67_fu_457_p2 = (xor_ln67_fu_452_p2 | icmp_ln67_fu_447_p2);

assign out_stream_TDATA_int_regslice = (tmp_4_fu_341_p4 ^ in_stream_TDATA_int_regslice);

assign out_stream_TVALID = regslice_both_out_stream_V_data_V_U_vld_out;

assign select_ln53_fu_358_p3 = ((mode_read_reg_472[0:0] == 1'b1) ? tmp_data_reg_527 : tmp_data_32_reg_548);

assign state_10_fu_425_p5 = {{state_213_fu_134[319:256]}, {xor_ln63_fu_420_p2}, {state_213_fu_134[127:0]}};

assign state_2_fu_258_p5 = {{grp_permutation_fu_219_ap_return[319:128]}, {xor_ln33_fu_253_p2}};

assign state_3_fu_298_p5 = {{xor_ln39_fu_292_p2}, {state_0_fu_130[255:0]}};

assign state_5_fu_316_p2 = (ap_phi_mux_state_112_phi_fu_213_p4 ^ 320'd1);

assign state_6_fu_363_p5 = {{select_ln53_fu_358_p3}, {state_213_load_reg_520[255:0]}};

assign state_8_fu_390_p5 = {{tmp_data_reg_527}, {state_213_load_reg_520[255:0]}};

assign state_9_fu_375_p5 = {{tmp_data_32_reg_548}, {state_213_load_reg_520[255:0]}};

assign state_fu_238_p4 = {{{{64'd9241399655273594880}, {key}}}, {nonce}};

assign tmp_1_fu_410_p4 = {{state_213_fu_134[255:128]}};

assign tmp_4_fu_341_p4 = {{state_213_fu_134[319:256]}};

assign tmp_data_32_fu_351_p2 = (tmp_4_fu_341_p4 ^ in_stream_TDATA_int_regslice);

assign tmp_s_fu_282_p4 = {{state_0_fu_130[319:256]}};

assign trunc_ln33_fu_249_p1 = grp_permutation_fu_219_ap_return[127:0];

assign trunc_ln66_fu_438_p1 = grp_permutation_fu_219_ap_return[127:0];

assign xor_ln33_fu_253_p2 = (trunc_ln33_fu_249_p1 ^ key_read_reg_478);

assign xor_ln39_fu_292_p2 = (tmp_s_fu_282_p4 ^ in_stream_TDATA_int_regslice);

assign xor_ln63_fu_420_p2 = (tmp_1_fu_410_p4 ^ key_read_reg_478);

assign xor_ln66_fu_442_p2 = (trunc_ln66_fu_438_p1 ^ key_read_reg_478);

assign xor_ln67_fu_452_p2 = (mode_read_reg_472 ^ 1'd1);

always @ (posedge ap_clk) begin
    state_reg_485[319:256] <= 64'b1000000001000000000011000000011000000000000000000000000000000000;
end


reg find_kernel_block = 0;
// synthesis translate_off
`include "ascon128_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //ascon128

